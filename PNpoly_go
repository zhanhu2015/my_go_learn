package main

import (
	"fmt"
)

func PNpoly(point [2]float64, verts [4][2]float64) bool {
	Xmax := verts[0][0]
	Xmin := verts[0][0]
	Ymax := verts[0][1]
	Ymin := verts[0][1]
	for _, vert := range verts[1:] {
		if vert[0] > Xmax {
			Xmax = vert[0]
		}
		if vert[0] < Xmin {
			Xmin = vert[0]
		}
		if vert[1] > Ymax {
			Ymax = vert[1]
		}
		if vert[1] < Ymin {
			Ymin = vert[1]
		}
	}
	if (point[0] > Xmax) || (point[0] < Xmin) || (point[1] > Ymax) || (point[1] < Ymin) {
		return false
	}
	j := len(verts) - 1
	IsIn := false
	for i := 0; i < len(verts); i++ {
		if i != 0 {
			j = i - 1
		}
		if (verts[i][1] > point[1]) != (verts[j][1] > point[1]) && (point[0] < (verts[j][0]-verts[i][0])*(point[1]-verts[i][1])/(verts[j][1]-verts[i][1])+verts[i][0]) {
			IsIn = !IsIn
		}
	}
	return IsIn
}

func main() {
	//a := [4]float64{3,6,9,10}
	//fmt.Println(math.M)
	//p1 := Vector3{9,0,0}
	//p2 := Vector3{0,-9,0}
	//fmt.Println(GetAngle(p1,p2))
	//fmt.Println(time.Now())
	//===================================================
	//endtimeStr := "2020-02-17 10:13:53"
	//endtime, _ := time.Parse("2006-01-02 15:04:05", endtimeStr)
	//startTime := endtime.AddDate(0,0,-1)
	//startTimeStr := startTime.Format("2006-01-02 15:04:05")
	//fmt.Println(startTimeStr)
	//var path []string
	//path = append(path, "laowang")
	//pathData, err := json.Marshal(path)
	//if err != nil{
	//	fmt.Println(err.Error())
	//}
	//pathStr := string(pathData)
	//fmt.Println(pathStr)

	//pathStr := "[]"
	//err := json.Unmarshal([]byte(pathStr), &path)
	//if err != nil {
	//	fmt.Println(err)
	//}
	//fmt.Println(path)
	point := [2]float64{116.316385, 39.984351}
	verts := [4][2]float64{{116.0,40.5},{116.0,39},{117.0,39},{117.0,40.5}}
	tmp := PNpoly(point, verts)
	fmt.Println(tmp)
}

//func GetData() {
//	type UpdateInfo struct {
//		DownloadUrl string `json:"download_url"`
//	}
//	update_info := &UpdateInfo{}
//	client := &http.Client{}
//	resp, err := client.Get("https://api.zzcrowd.com/distribution/v1/publishes/beebox/channels/windows")
//	defer resp.Body.Close()
//	body, err := ioutil.ReadAll(resp.Body)
//	if err != nil {
//		fmt.Println(err)
//	}
//	json.Unmarshal([]byte(body), update_info)
//	fmt.Println(update_info.DownloadUrl)
//	fmt.Println(string(body))
//}

//type Vector3 struct {
//	X float64    `json:"x"`
//	Y float64    `json:"y"`
//	Z float64    `json:"z"`
//}
//
//func GetAngle(v1 Vector3,v2 Vector3) float64 {
//	//求两向量夹角
//	a := v1.X * v2.X + v1.Y * v2.Y + v1.Z * v2.Z
//	b := math.Sqrt(math.Pow(v1.X,2)+math.Pow(v1.Y,2)+math.Pow(v1.Z,2))*
//		math.Sqrt(math.Pow(v2.X,2)+math.Pow(v2.Y,2)+math.Pow(v2.Z,2))
//	angel := math.Acos(a/b)
//	return angel * 180 / math.Pi
//}
